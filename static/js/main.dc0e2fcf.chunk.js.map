{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","focusRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","placeholder","name","onChange","ref","onClick","Todo","todos","completeTodo","removeTodo","editTodo","setEdit","map","todo","index","isComplete","TodoList","setTodos","test","newTodo","updatedTodos","filteredTodos","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOA4CeA,MA1Cf,SAAkBC,GAEd,MAA0BC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAAnE,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAGhBW,EAAe,SAAAF,GACjBA,EAAEG,iBACFf,EAAMgB,SAAS,CACXC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAEVC,EAAS,KAGb,OACI,sBAAMiB,UAAU,YAAYN,SAAUF,EAAtC,SACMd,EAAME,KACR,qCACA,uBAAOoB,UAAU,kBAAkBC,YAAY,mBAAmBC,KAAK,OAAOrB,MAAOC,EAAOqB,SAAUd,EAAce,IAAKpB,IACzH,wBAAQgB,UAAU,WAAWK,QAASb,EAAtC,uBAKA,qCACI,uBAAOQ,UAAU,aAAaE,KAAK,OAAOrB,MAAOC,EAAOmB,YAAY,iBAAiBE,SAAUd,EAAce,IAAKpB,IAClH,wBAAQgB,UAAU,MAAMK,QAASb,EAAjC,uBCADc,MAhCf,YAA4D,IAA7CC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,SAE5C,EAAwB/B,mBAAS,CAC7BgB,GAAI,KACJd,MAAO,KAFX,mBAAOD,EAAP,KAAa+B,EAAb,KAaA,OAAG/B,EAAKe,GACG,cAAC,EAAD,CAAUf,KAAMA,EAAMc,SATZ,SAAAb,GACjB6B,EAAS9B,EAAKe,GAAId,GAClB8B,EAAQ,CACJhB,GAAI,KACJd,MAAO,QAQR0B,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBAAKd,UAAWa,EAAKE,WAAa,oBAAsB,WAAxD,kCACI,sBAAmBV,QAAS,kBAAMG,EAAaK,EAAKlB,KAApD,qDACKkB,EAAKd,KADV,uFAAUc,EAAKlB,IAGf,sBAAKK,UAAU,QAAf,UACI,cAAC,IAAD,CAAiBA,UAAU,WAAWK,QAAS,kBAAKI,EAAWI,EAAKlB,OACpE,cAAC,IAAD,CAAQK,UAAU,YAAYK,QAAS,kBAAKM,EAAQ,CAAChB,GAAGkB,EAAKlB,GAAId,MAAMgC,EAAKd,eANXe,OCyBlEE,MA9Cf,WAEI,MAA0BrC,mBAAS,IAAnC,mBAAO4B,EAAP,KAAcU,EAAd,KAkCA,OACI,gCACI,kDACA,cAAC,EAAD,CAAUvB,SAnCD,SAAAmB,GACb,GAAIA,EAAKd,OAAQ,QAAQmB,KAAKL,EAAKd,MAAnC,CAOA,IAAMoB,EAAO,CAAIN,GAAJ,mBAAaN,IAC1BU,EAASE,OA4BL,cAAC,EAAD,CAAMZ,MAAOA,EAAOC,aAfP,SAAAb,GACjB,IAAIyB,EAAeb,EAAMK,KAAI,SAAAC,GAIzB,OAHGA,EAAKlB,KAAOA,IACXkB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXI,EAASG,IAQ2CX,WAzBrC,SAAAd,GACf,IAAM0B,EAAgB,YAAId,GAAOe,QAAO,SAAAT,GAAI,OAAIA,EAAKlB,KAAOA,KAC5DsB,EAASI,IAuBmEX,SApB/D,SAACa,EAAQC,GAClBA,EAASzB,OAAQ,QAAQmB,KAAKM,EAASzB,OAC3CkB,GAAS,SAAAQ,GAAI,OAAIA,EAAKb,KAAI,SAAAc,GAAI,OAAIA,EAAK/B,KAAO4B,EAASC,EAAWE,eCf3DC,MARf,WACE,OACE,qBAAK3B,UAAU,WAAf,SACE,cAAC,EAAD,OCHN4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.dc0e2fcf.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\nfunction TodoForm(props) {\r\n\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');            //if we are updating an existing one then set the todo to the value else set it to empty\r\n\r\n    const focusRef = useRef(null)                                   //on page reload automatically focuses on the <input>\r\n    \r\n    useEffect(()=>{                                                 //same as componentDidMount\r\n        focusRef.current.focus()\r\n    })\r\n    \r\n    const handleChange = e => {                                     //onChange handler for input tag, so when we type inside input tag,\r\n        setInput(e.target.value);                                   //and we basically fetch by e.target.value and set the state \"input\" by using setInput\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000),                  //assigns a random key to each todo item\r\n            text: input                                             //takes the value from state \"input\" assigned by setInput\r\n        });\r\n        setInput('');                                               //it will clear the input tag, every time you click on \"ADD\" button(which is set for onSubmit),\r\n    }\r\n\r\n    return (\r\n        <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n            { props.edit ? (                                                             //checks if you're updating an existing todo, if yes render the first fragment else render the second one\r\n            <>\r\n            <input className='todo-input edit' placeholder='update this todo' name='text' value={input} onChange={handleChange} ref={focusRef}/>\r\n            <button className='add edit' onClick={handleSubmit}>Update</button>\r\n            </>\r\n            ) \r\n            : \r\n            (\r\n            <>\r\n                <input className=\"todo-input\" name=\"text\" value={input} placeholder=\"Add a new todo\" onChange={handleChange} ref={focusRef}/>\r\n                <button className=\"add\" onClick={handleSubmit}>ADD</button>\r\n            </>\r\n            )}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React, { useState } from 'react'\r\nimport { AiOutlineDelete } from 'react-icons/ai'\r\nimport { BiEdit } from 'react-icons/bi'\r\nimport TodoForm from './TodoForm'\r\n\r\nfunction Todo({todos, completeTodo, removeTodo, editTodo}) {                                        //destructuring the functions from props recieved via TodoList component\r\n\r\n    const [edit, setEdit] = useState({                                                              //this state is used, when user clicks on edit icon to edit an existing todo\r\n        id: null,\r\n        value: ''\r\n    })\r\n\r\n    const submitUpdate = value => {                                                                 //gets called when the user clicks on \"Update\" button in the first fragment\r\n        editTodo(edit.id, value)                                                                    //pass the edit.id and value to editTodo() in TodoList component\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        })\r\n    }\r\n\r\n    if(edit.id) {                                                                                  //if the user is in edit mode,\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate}/>                                     //then pass the edit as a prop(edit.id and edit.value) and call submitUpdate()\r\n    }\r\n\r\n    return todos.map((todo, index) => (\r\n        <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'} key={index}>                     {/*the condition checks whether a todo was complete and toggles the className accordingly*/}\r\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>                                        {/*when this div is clicked, completeTodo() will be called and it will toggle the div color based on isComplete value*/}\r\n                {todo.text}                                                                                  {/*render the todo text*/}\r\n            </div>\r\n            <div className=\"icons\">\r\n                <AiOutlineDelete className=\"del-icon\" onClick={()=> removeTodo(todo.id)}/>\r\n                <BiEdit className=\"edit-icon\" onClick={()=> setEdit({id:todo.id, value:todo.text})}/>\r\n            </div>\r\n        </div>\r\n    ))\r\n}\r\n\r\nexport default Todo\r\n","import React, {useState} from 'react'\r\nimport Todo from './Todo';\r\nimport TodoForm from './TodoForm';\r\n\r\nfunction TodoList() {\r\n\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    const addTodos = todo => {                                                       //todo is being passed as a param\r\n        if(!todo.text || /^\\s*$/.test(todo.text)) {return;}                          //a simple condition that will check the following condition every time you add a new todo\r\n        /* \r\n        Here ^ means the beginning of expression.\r\n        \\s* means 0 or more occurrences of space characters(' ', tab etc)\r\n        $ means end of the string.\r\n        so /^\\s*$/ is the regex for empty string or string with only spaces.\r\n        */\r\n        const newTodo = [todo, ...todos];                                            //create a newTodo[] and push new items to the prev list of items, each new item gets added\r\n        setTodos(newTodo);                                                           //then set the state \"todos\" using setTodos = newTodo\r\n    }\r\n\r\n    const removeTodo = id => {                                                       //get the id from the <div> on which the delete icon was clicked\r\n        const filteredTodos = [...todos].filter(todo => todo.id !== id);             //this will remove the todo with that particular id fromt the list\r\n        setTodos(filteredTodos);                                                     //and now set state \"todos\" to the \"filteredTodos\"\r\n    }\r\n\r\n    const editTodo = (todoId, newValue) => {\r\n        if(!newValue.text || /^\\s*$/.test(newValue.text)) {return;}                  //on edit we want to check the same logic for white spaces \r\n        setTodos(prev => prev.map(item => item.id === todoId ? newValue : item))     //if the id matches with the edit todo id then change the state otherwise keep the prev state\r\n    }\r\n\r\n    const completeTodo = id => {                                                     //get the id from the <div> that was clicked\r\n        let updatedTodos = todos.map(todo => {                                       //map through all the todos and\r\n            if(todo.id === id) {                                                     //find the todo item with the id from <div>\r\n                todo.isComplete = !todo.isComplete;                                  //and set isComplete to True|False only for that particular id\r\n            }\r\n            return todo;                                                             //push all the todos in updatedTodos\r\n        })\r\n        setTodos(updatedTodos);                                                      //set state \"todos\" to updatedTodos using setTodos\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>What's the plan?</h1>\r\n            <TodoForm onSubmit={addTodos}/>\r\n            {/*passing all the above functions as a prop to Todo component*/}\r\n            <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} editTodo={editTodo}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}